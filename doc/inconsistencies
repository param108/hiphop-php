<h2>Inconsistencies between PHP and HipHop</h2>

These are the known inconsistencies between current HipHop and PHP.

1. Operators

(1) instanceof

In PHP, [constant] instanceof [class name] will cause a fatal.
In HipHop, there is no special case for constants and the expression's value is
false.

2. Classes and objects

(1) Exceptions thrown from destructors

In HipHop, exceptions and fatals thrown from destructors will be swallowed
while logging an error. Effectively, there is a try/catch enclosing the body
of the __destruct method. These exceptions are catchable in PHP outside of the
__destruct method.

(2) Exceptions thrown from __toString()

PHP doesn't allow them. HipHop does. Also, PHP doesn't allow __toString() to
return anything other than a string. HipHop will just convert return value to
string.

(3) unset

In PHP, a data member that is unset will not appear at all in vardump or
serialize. Also, unsetting a data member and then resetting it will alter its
order in foreach iterations.

In HipHop, it will still appear in vardump or serialize as null. It will
not appear in foreach iteration, so it's consistent with PHP. When unsetting
a data member and then resetting it, it's order is not altered in foreach
iteration. When unsetting then resetting to NULL, HipHop will be confused to
think the property is still not present (bug).

(3) $this handling of static method

In PHP, $this may be passed into an unrelated class's static method. Here's an
example,

  <?php
  class b {
    public function bar() {
      var_dump($this); // <-- $this is actually class "c" object
      $this->baz();
    }
  }
  class c {  // <-- note that "c" has nothing to do with "b"
    public $x = 2;
    public function foo() {
      b::bar();
    }
    public function baz() {
      echo "Hello!\n";
    }
  }
  $obj = new c;
  $obj->foo();

In HipHop, $this will be NULL when doing this.

3. Eval Issues

(1) eval

Is only supported in limited circumstances.
Example unsupported case: phpt...bug21960

(2) create_function

is only supported with literal arguments
Example unsupported case: phpt...bug22690

(3) preg_replace /e

is only supported in limited cases.
Example unsupported case: phpt...bug24403

4. Dynamic declared globals

are not supported, e.g. (phpt...bug24396)

  global $$k;
  $$k = $v;

Also, in PHP, $GLOBALS can be used as a regular variable, for example,

  $GLOBALS = 0;
  $x = $GLOBALS - 5;

  $g = $GLOBALS;
  $g['x'] = 3;

In HipHop, this is not allowed or not working.

5. Dynamic declared constants

are not supported, e.g.

  define($name, $value);

6. Misc

(1) get_declared_classes

Can return classes in different order from PHP's.

(2) uninitialized variables

If an uninitialized variable is being used before it's assigned with a value,
and this variable is inferred as integers, it will be 0, instead of null.

(3) call_user_func() and call_user_func_array()

PHP doesn't respect pass-by-reference parameters and return value. HipHop does.

PHP doesn't allow func_get_args() to be used as arguments of these two
functions. HipHop does.

(4) XMLWriter

In PHP, XMLWriter class and its functions returned different types of objects,

  <?php
  function foo(XMLWriter $w) {}
  $obj = new XMLWriter();
  foo($obj); // <-- this one is actually okay
  $obj2 = xmlwriter_open_memory(); // <-- just not this one
  var_dump($obj, $obj2);
  foo($obj2);

In HipHop, they are the same.

7. Extra errors, warnings and notices in HipHop

(1) HipHop notices about number[offset] or bool[offset].

// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"spl_classes", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.spl-classes.php )\n *\n * This function returns an array with the current available SPL classes.\n *\n * @return     map     Returns an array containing the currently available\n *                     SPL classes.\n */", 
"spl_object_hash", T(String), S(0), "obj", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.spl-object-hash.php )\n *\n * This function returns a unique identifier for the object. This id can\n * be used as a hash key for storing objects or for identifying an object.\n *\n * @obj        object  Any object.\n *\n * @return     string  A string that is unique for each currently existing\n *                     object and is always the same for each object.\n */", 
"class_implements", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "autoload", T(Boolean), "b:1;", "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.class-implements.php )\n *\n * This function returns an array with the names of the interfaces that\n * the given class and its parents implement.\n *\n * @obj        mixed   An object (class instance) or a string (class name).\n * @autoload   bool    Whether to allow this function to load the class\n *                     automatically through the __autoload magic method.\n *\n * @return     mixed   An array on success, or FALSE on error.\n */", 
"class_parents", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "autoload", T(Boolean), "b:1;", "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.class-parents.php )\n *\n * This function returns an array with the name of the parent classes of\n * the given class.\n *\n * @obj        mixed   An object (class instance) or a string (class name).\n * @autoload   bool    Whether to allow this function to load the class\n *                     automatically through the __autoload magic method.\n *\n * @return     mixed   An array on success, or FALSE on error.\n */", 
"iterator_apply", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "func", T(Variant), NULL, NULL, S(0), "params", T(Array), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iterator-apply.php )\n *\n * Calls a function for every element in an iterator.\n *\n * @obj        mixed   The class to iterate over.\n * @func       mixed   The callback function to call on every element. The\n *                     function must return TRUE in order to continue\n *                     iterating over the iterator.\n * @params     map     Arguments to pass to the callback function.\n *\n * @return     mixed   Returns the iteration count.\n */", 
"iterator_count", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iterator-count.php )\n *\n * Count the elements in an iterator.\n *\n * @obj        mixed   The iterator being counted.\n *\n * @return     mixed   The number of elements in iterator.\n */", 
"iterator_to_array", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "use_keys", T(Boolean), "b:1;", "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iterator-to-array.php )\n *\n * Copy the elements of an iterator into an array.\n *\n * @obj        mixed   The iterator being copied.\n * @use_keys   bool    Whether to use the iterator element keys as index.\n *\n * @return     mixed   An array containing the elements of the iterator.\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#elif EXT_TYPE == 3

#endif

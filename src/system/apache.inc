// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"apache_child_terminate", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apache-child-terminate.php )\n *\n * apache_child_terminate() will register the Apache process executing the\n * current PHP request for termination once execution of PHP code is\n * completed. It may be used to terminate a process after a script with\n * high memory consumption has been run as memory will usually only be\n * freed internally but not given back to the operating system.\n *\n * @return     bool    Returns TRUE if PHP is running as an Apache 1\n *                     module, the Apache version is non-multithreaded, and\n *                     the child_terminate PHP directive is enabled\n *                     (disabled by default). If these conditions are not\n *                     met, FALSE is returned and an error of level\n *                     E_WARNING is generated.\n */", 
"apache_get_modules", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apache-get-modules.php\n * )\n *\n * Get a list of loaded Apache modules.\n *\n * @return     vector  An array of loaded Apache modules.\n */", 
"apache_get_version", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apache-get-version.php\n * )\n *\n * Fetch the Apache version.\n *\n * @return     string  Returns the Apache version on success or FALSE on\n *                     failure.\n */", 
"apache_getenv", T(String), S(0), "variable", T(String), NULL, NULL, S(0), "walk_to_top", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apache-getenv.php )\n *\n * Get an Apache environment variable as specified by variable.\n *\n * This function requires Apache 2 otherwise it's undefined.\n *\n * @variable   string  The Apache environment variable\n * @walk_to_top\n *             bool    Whether to get the top-level variable available to\n *                     all Apache layers.\n *\n * @return     string  The value of the Apache environment variable on\n *                     success, or FALSE on failure\n */", 
"apache_lookup_uri", T(Object), S(0), "filename", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apache-lookup-uri.php )\n *\n * This performs a partial request for a URI. It goes just far enough to\n * obtain all the important information about the given resource. This\n * function is only supported when PHP is installed as an Apache module.\n *\n * @filename   string  The filename (URI) that's being requested.\n *\n * @return     object  An object of related URI information. The properties\n *                     of this object are:\n *\n *                     status the_request status_line method content_type\n *                     handler uri filename path_info args boundary\n *                     no_cache no_local_copy allowed send_bodyct\n *                     bytes_sent byterange clength unparsed_uri mtime\n *                     request_time\n */", 
"apache_note", T(Variant), S(0), "note_name", T(String), NULL, NULL, S(0), "note_value", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apache-note.php )\n *\n * This function is a wrapper for Apache's table_get and table_set. It\n * edits the table of notes that exists during a request. The table's\n * purpose is to allow Apache modules to communicate.\n *\n * The main use for apache_note() is to pass information from one module\n * to another within the same request.\n *\n * @note_name  string  The name of the note.\n * @note_value string  The value of the note.\n *\n * @return     mixed   If called with one argument, it returns the current\n *                     value of note note_name. If called with two\n *                     arguments, it sets the value of note note_name to\n *                     note_value and returns the previous value of note\n *                     note_name. If the note cannot be retrieved, FALSE is\n *                     returned.\n */", 
"apache_request_headers", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apache-request-headers.php )\n *\n * Fetches all HTTP request headers from the current request. This\n * function is only supported when PHP is installed as an Apache module.\n *\n * @return     vector  An associative array of all the HTTP headers in the\n *                     current request, or FALSE on failure.\n */", 
"apache_reset_timeout", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apache-reset-timeout.php )\n *\n * apache_reset_timeout() resets the Apache write timer, which defaults to\n * 300 seconds. With set_time_limit(0); ignore_user_abort(true) and\n * periodic apache_reset_timeout() calls, Apache can theoretically run\n * forever.\n *\n * This function requires Apache 1.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"apache_response_headers", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apache-response-headers.php )\n *\n * Fetch all HTTP response headers.\n *\n * @return     vector  An array of all Apache response headers on success\n *                     or FALSE on failure.\n */", 
"apache_setenv", T(Boolean), S(0), "variable", T(String), NULL, NULL, S(0), "value", T(String), NULL, NULL, S(0), "walk_to_top", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apache-setenv.php )\n *\n * apache_setenv() sets the value of the Apache environment variable\n * specified by variable.\n *\n * When setting an Apache environment variable, the corresponding $_SERVER\n * variable is not changed.\n *\n * @variable   string  The environment variable that's being set.\n * @value      string  The new variable value.\n * @walk_to_top\n *             bool    Whether to set the top-level variable available to\n *                     all Apache layers.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"ascii2ebcdic", T(Int32), S(0), "ascii_str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ascii2ebcdic.php )\n *\n *\n * @ascii_str  string\n *\n * @return     int\n */", 
"ebcdic2ascii", T(Int32), S(0), "ebcdic_str", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ebcdic2ascii.php )\n *\n *\n * @ebcdic_str string\n *\n * @return     int\n */", 
"getallheaders", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getallheaders.php )\n *\n * Fetches all HTTP headers from the current request.\n *\n * This function is an alias for apache_request_headers(). Please read the\n * apache_request_headers() documentation for more information on how this\n * function works. This function is only supported when PHP is installed as\n * an Apache module.\n *\n * @return     vector  An associative array of all the HTTP headers in the\n *                     current request, or FALSE on failure.\n */", 
"virtual", T(Boolean), S(0), "filename", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.virtual.php )\n *\n * virtual() is an Apache-specific function which is similar to\n * <!--#include virtual...--> in mod_include. It performs an Apache\n * sub-request. It is useful for including CGI scripts or .shtml files, or\n * anything else that you would parse through Apache. Note that for a CGI\n * script, the script must generate valid CGI headers. At the minimum that\n * means it must generate a Content-Type header.\n *\n * To run the sub-request, all buffers are terminated and flushed to the\n * browser, pending headers are sent too. This function is only supported\n * when PHP is installed as an Apache module.\n *\n * @filename   string  The file that the virtual command will be performed\n *                     on.\n *\n * @return     bool    Performs the virtual command on success, or returns\n *                     FALSE on failure.\n */", 
"apache_get_config", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apache-get-config.php )\n *\n *\n * @return     mixed\n */", 
"apache_get_scoreboard", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apache-get-scoreboard.php )\n *\n *\n * @return     mixed\n */", 
"apache_get_rewrite_rules", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apache-get-rewrite-rules.php )\n *\n *\n * @return     mixed\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#elif EXT_TYPE == 3

#endif

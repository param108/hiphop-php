/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXT_FB_H__
#define __EXT_FB_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <runtime/base/base_includes.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

Variant f_fb_thrift_serialize(CVarRef thing);
Variant f_fb_thrift_unserialize(CVarRef thing, Variant success, Variant errcode = null_variant);
Variant f_fb_serialize(CVarRef thing);
Variant f_fb_unserialize(CVarRef thing, Variant success, Variant errcode = null_variant);
bool f_fb_intercept(CStrRef name, CVarRef handler, CVarRef data = null_variant);
Variant f_fb_stubout_intercept_handler(CStrRef name, CVarRef obj, CArrRef params, CVarRef data, Variant done);
Variant f_fb_rpc_intercept_handler(CStrRef name, CVarRef obj, CArrRef params, CVarRef data, Variant done);
void f_fb_renamed_functions(CArrRef names);
bool f_fb_rename_function(CStrRef orig_func_name, CStrRef new_func_name);
bool f_fb_utf8ize(Variant input);
Array f_fb_call_user_func_safe(int _argc, CVarRef function, CArrRef _argv = null_array);
Variant f_fb_call_user_func_safe_return(int _argc, CVarRef function, CVarRef def, CArrRef _argv = null_array);
Array f_fb_call_user_func_array_safe(CVarRef function, CArrRef params);
Variant f_fb_get_code_coverage();
void f_xhprof_enable(int flags, CArrRef args = null_array);
Variant f_xhprof_disable();
void f_xhprof_sample_enable();
Variant f_xhprof_sample_disable();
Variant f_xhprof_run_trace(CStrRef, int flags = 0);
void f_fb_load_local_databases(CArrRef servers);
Array f_fb_parallel_query(CArrRef sql_map, int max_thread = 50, bool combine_result = true, bool retry_query_on_fail = true, int connect_timeout = -1, int read_timeout = -1, bool timeout_in_ms = false);
Array f_fb_crossall_query(CStrRef sql, int max_thread = 50, bool retry_query_on_fail = true, int connect_timeout = -1, int read_timeout = -1, bool timeout_in_ms = false);
void f_fb_set_taint(Variant str, int taint);
void f_fb_unset_taint(Variant str, int taint);
int f_fb_get_taint(CStrRef str);
Variant f_fb_const_fetch(CVarRef key);
extern const int64 k_FB_UNSERIALIZE_NONSTRING_VALUE;
extern const int64 k_FB_UNSERIALIZE_UNEXPECTED_END;
extern const int64 k_FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE;
extern const int64 k_FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE;
extern const int64 k_XHPROF_FLAGS_NO_BUILTINS;
extern const int64 k_XHPROF_FLAGS_CPU;
extern const int64 k_XHPROF_FLAGS_MEMORY;
extern const int64 k_XHPROF_FLAGS_VTSC;

///////////////////////////////////////////////////////////////////////////////

int fb_unserialize_from_buffer(Variant &res, const char *buff, int buff_len,
                               int *pos);


///////////////////////////////////////////////////////////////////////////////
// const index interface and load function
Variant f_fb_const_fetch(CVarRef key);
void const_load();
void const_load_set(Variant key, Variant value);

///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXT_FB_H__
